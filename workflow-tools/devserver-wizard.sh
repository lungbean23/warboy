#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." && pwd)"
APPS_DIR="${ROOT_DIR}/apps"

have(){ command -v "$1" >/dev/null 2>&1; }

detect_lan_ip() {
  # try hostname -I, then ip route
  local ip
  ip="$(hostname -I 2>/dev/null | awk '{print $1}' || true)"
  if [[ -z "$ip" ]]; then
    ip="$(ip route get 1 2>/dev/null | awk '/src/ {for(i=1;i<=NF;i++) if($i=="src"){print $(i+1); exit}}' || true)"
  fi
  echo "${ip:-127.0.0.1}"
}

# 1) Find vite apps
mapfile -t VITE_APPS < <(find "$APPS_DIR" -maxdepth 2 -type f \( -name vite.config.ts -o -name vite.config.js \) -printf '%h\n' | sort -u)
if [[ ${#VITE_APPS[@]} -eq 0 ]]; then
  echo "❌ No Vite apps found under ${APPS_DIR}."
  exit 1
fi

echo "🧙  Dev Server Wizard"
echo
echo "Found Vite apps:"
i=1
for p in "${VITE_APPS[@]}"; do
  echo "  $i) ${p#${ROOT_DIR}/}"
  ((i++))
done

read -rp "Pick an app [1-${#VITE_APPS[@]}]: " CH
[[ "$CH" =~ ^[0-9]+$ ]] && (( CH>=1 && CH<=${#VITE_APPS[@]} )) || { echo "Invalid choice"; exit 1; }
APP_DIR="${VITE_APPS[$((CH-1))]}"
APP_REL="${APP_DIR#${ROOT_DIR}/}"
ENV_FILE="${APP_DIR}/.env.local"

# 2) Gather params
LAN_IP="$(detect_lan_ip)"
DEFAULT_PORT=5173
read -rp "Server host (default: 0.0.0.0 to bind all): " VITE_HOST
VITE_HOST="${VITE_HOST:-0.0.0.0}"

read -rp "Server port (default: ${DEFAULT_PORT}): " VITE_PORT
VITE_PORT="${VITE_PORT:-$DEFAULT_PORT}"

read -rp "HMR host (for cross-device live reload; default: ${LAN_IP}): " VITE_HMR_HOST
VITE_HMR_HOST="${VITE_HMR_HOST:-$LAN_IP}"

read -rp "HMR protocol (ws/wss) [ws]: " VITE_HMR_PROTO
VITE_HMR_PROTO="${VITE_HMR_PROTO:-ws}"

read -rp "HMR port (default: same as server port ${VITE_PORT}): " VITE_HMR_PORT
VITE_HMR_PORT="${VITE_HMR_PORT:-$VITE_PORT}"

# 3) Write .env.local (idempotent replace)
tmp="$(mktemp)"
cat >"$tmp" <<EOF
# Generated by devserver-wizard.sh
VITE_HOST=${VITE_HOST}
VITE_PORT=${VITE_PORT}
VITE_HMR_HOST=${VITE_HMR_HOST}
VITE_HMR_PROTO=${VITE_HMR_PROTO}
VITE_HMR_PORT=${VITE_HMR_PORT}
EOF
mv "$tmp" "$ENV_FILE"

echo
echo "✅ Wrote ${APP_REL}/.env.local with:"
cat "$ENV_FILE"

# 4) Offer to open firewall (Linux)
if have firewall-cmd; then
  read -rp "Open firewall for TCP ${VITE_PORT} with firewalld? [y/N]: " A
  if [[ "$A" =~ ^[Yy]$ ]]; then
    sudo firewall-cmd --add-port="${VITE_PORT}"/tcp --permanent
    sudo firewall-cmd --reload
    echo "✅ firewalld opened for ${VITE_PORT}/tcp"
  fi
elif have ufw; then
  read -rp "Open firewall for TCP ${VITE_PORT} with UFW? [y/N]: " A
  if [[ "$A" =~ ^[Yy]$ ]]; then
    sudo ufw allow "${VITE_PORT}/tcp"
    echo "✅ UFW opened for ${VITE_PORT}/tcp"
  fi
else
  echo "ℹ️  No known firewall tool detected (firewalld/ufw)."
fi

# 5) (Optional) Print Apache reverse proxy vhost
read -rp "Print an Apache HTTPS proxy vhost snippet (warboy.local style)? [y/N]: " PV
if [[ "$PV" =~ ^[Yy]$ ]]; then
  read -rp "Dev hostname to use (default: $(basename "$APP_DIR").local): " DEV_HOST
  DEV_HOST="${DEV_HOST:-$(basename "$APP_DIR").local}"
  cat <<SNIP

# Save as: /etc/httpd/conf.d/${DEV_HOST}-proxy.conf
<VirtualHost *:443>
  ServerName ${DEV_HOST}
  SSLEngine on
  SSLCertificateFile /etc/pki/tls/local/${DEV_HOST}/${DEV_HOST}.crt
  SSLCertificateKeyFile /etc/pki/tls/local/${DEV_HOST}/${DEV_HOST}.key

  ProxyPreserveHost On
  ProxyPass        / http://127.0.0.1:${VITE_PORT}/
  ProxyPassReverse / http://127.0.0.1:${VITE_PORT}/

  Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
</VirtualHost>

# Then:
#   - issue a local cert (mkcert) for ${DEV_HOST}
#   - add '127.0.0.1 ${DEV_HOST}' to /etc/hosts
#   - sudo httpd -t && sudo systemctl reload httpd
SNIP
fi

echo
echo "🎯 Next:"
echo "  cd ${APP_REL} && npm run dev"
echo "  On other devices: http://${VITE_HMR_HOST}:${VITE_PORT}/"

